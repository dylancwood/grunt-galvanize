'use strict';
let _ = require('lodash'),
    uuid = require('uuid');

function formatGalvanizeConfig (config) {
    let options = config.options || [],
        configs = config.configs || [],
        formattedOptions,
        formattedConfigs;

    if (_.isArray(options)) {
        formattedOptions = _.cloneDeep(options);
    } else {
        formattedOptions = _.map(options, function (value, key) {
            return {key: key, value: _.cloneDeep(value)};
        });
    }

    if (_.isArray(configs)) {
        formattedConfigs = _.cloneDeep(configs);
    } else {
        formattedConfigs = _.map(configs, function (value, key) {
            return {key: key, value: _.cloneDeep(value)};
        });
    }

    return {options: formattedOptions, configs: formattedConfigs};
}

function setGalvanizeOptions (grunt, config) {
    let options = config.options,
        configs = config.configs;

    options.forEach(function (option) {
        grunt.option(option.key, option.value);
    });

    configs.forEach(function (config) {
        grunt.config(config.key, config.value);
    });
}

module.exports = function (grunt) {
    grunt.registerTask(
        'galvanize',
        'Run a single task multiple times with different options',
        function () {
            let galvanizedTaskName,
                taskName = this.args.shift(),
                targets = this.args,
                galvanizeConfig = grunt.option('galvanizeConfig'),
                subTaskId = `galvanize-${taskName}${uuid.v1()}`;

            // validate inputs
            if (!grunt.task.exists(taskName)) {
                throw new Error(`Galvanize: task '${taskName}' not registered.`);
            }

            if (!galvanizeConfig || !_.isArray(galvanizeConfig)) {
                throw new Error('Galvanize: requires an array set in ' +
                    'options: use `grunt.option("galvanizeConfig", myList);`');
            }

            galvanizeConfig.forEach(function (config, index) {
                galvanizedTaskName = `${subTaskId}-${index}`;
                grunt.config(
                    [galvanizedTaskName, 'galvanizeConfig'],
                    formatGalvanizeConfig(config)
                );
                grunt.registerTask(
                    galvanizedTaskName,
                    `auto-generated by grunt-galvanize to call ${taskName}`,
                    function runGalvanizedTask () {
                        let config = grunt.config(
                            [this.name, 'galvanizeConfig']
                        );

                        setGalvanizeOptions(grunt, config);

                        //run original task
                        if (targets.length !== 0) {
                            grunt.task.run(`${taskName}:${targets.join(':')}`);
                        } else {
                            grunt.task.run(taskName);
                        }
                    }
                );

                grunt.task.run(galvanizedTaskName);
            });
        }
    );
};
